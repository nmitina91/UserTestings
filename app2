import os
import streamlit as st
import requests
import sqlite3
import time

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –∏–∑ Streamlit Secrets
gigachat_api_key = st.secrets["GIGACHAT_API_KEY"]

# URL API GigaChat
GIGACHAT_API_URL = "https://gigachat.sbercloud.ru/api/v1/chat/completions"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(page_title="–ß–∞—Ç —Å GigaChat", layout="wide")
st.title("ü§ñ –ß–∞—Ç —Å GigaChat")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("chat_logs.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute("""
    CREATE TABLE IF NOT EXISTS events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp TEXT,
        event_type TEXT,
        details TEXT
    )
""")
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
def log_event(event_type, details=""):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO events (timestamp, event_type, details) VALUES (?, ?, ?)", (timestamp, event_type, details))
    conn.commit()

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
if "messages" not in st.session_state:
    st.session_state.messages = []
if "message_count" not in st.session_state:
    st.session_state.message_count = 0
if "chat_started" not in st.session_state:
    st.session_state.chat_started = False
if "gpt_role" not in st.session_state:
    st.session_state.gpt_role = "–û–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"

# –í—ã–±–æ—Ä —Ä–æ–ª–∏ GigaChat –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat")
role_options = {
    "–û–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": "–¢—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π AI, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.",
    "–£—á–∏—Ç–µ–ª—å": "–¢—ã ‚Äì —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —É—á–∏—Ç–µ–ª—å, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.",
    "–®—É—Ç–Ω–∏–∫": "–¢—ã ‚Äì –≤–µ—Å–µ–ª—ã–π –∫–æ–º–∏–∫, –æ—Ç–≤–µ—á–∞—é—â–∏–π —Å —é–º–æ—Ä–æ–º.",
    "–ü—Å–∏—Ö–æ–ª–æ–≥": "–¢—ã ‚Äì —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    "–°—Ç—Ä–æ–≥–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": "–¢—ã ‚Äì —Å—Ç—Ä–æ–≥–∏–π –∫–æ—É—á, –∫–æ—Ç–æ—Ä—ã–π –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é."
}
selected_role = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å GigaChat", list(role_options.keys()))

# –ï—Å–ª–∏ —Ä–æ–ª—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π
if selected_role != st.session_state.gpt_role:
    st.session_state.gpt_role = selected_role
    st.session_state.messages = [{"role": "system", "content": role_options[selected_role]}]
    log_event("ROLE_CHANGED", f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_role}")

st.sidebar.write(f"üîπ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: **{selected_role}**")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API
def get_gigachat_response(messages):
    headers = {
        "Authorization": f"Bearer {gigachat_api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "GigaChat",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
        "messages": messages
    }

    response = requests.post(GIGACHAT_API_URL, headers=headers, json=data)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return f"–û—à–∏–±–∫–∞: {response.json()}"

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –û–±—ã—á–Ω—ã–π —á–∞—Ç
prompt = st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
if prompt:
    if not st.session_state.chat_started:
        log_event("CHAT_STARTED", "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞")
        st.session_state.chat_started = True

    st.session_state.message_count += 1
    st.session_state.messages.append({"role": "user", "content": prompt})
    log_event("MESSAGE_SENT", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {prompt}")

    with st.chat_message("user"):
        st.markdown(prompt)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat API
    reply = get_gigachat_response(st.session_state.messages)
    
    st.session_state.messages.append({"role": "assistant", "content": reply})
    log_event("BOT_REPLY", f"GigaChat –æ—Ç–≤–µ—Ç–∏–ª: {reply}")

    with st.chat_message("assistant"):
        st.markdown(reply)
