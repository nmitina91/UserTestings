import os
import streamlit as st
import openai
import sqlite3
import time

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –∏–∑ Streamlit Secrets
openai_api_key = st.secrets["OPENAI_API_KEY"]

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI(api_key=openai_api_key)

# –ó–∞–¥–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
AUTH_PASSWORD = "secret123"

st.set_page_config(page_title="–ß–∞—Ç —Å AI", layout="wide")
st.title("ü§ñ –ß–∞—Ç —Å AI")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("chat_logs.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
cursor.execute("""
    CREATE TABLE IF NOT EXISTS events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp TEXT,
        event_type TEXT,
        details TEXT
    )
""")
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
def log_event(event_type, details=""):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO events (timestamp, event_type, details) VALUES (?, ?, ?)", (timestamp, event_type, details))
    conn.commit()

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
if "messages" not in st.session_state:
    st.session_state.messages = []
if "message_count" not in st.session_state:
    st.session_state.message_count = 0
if "is_authenticated" not in st.session_state:
    st.session_state.is_authenticated = False
if "auth_time" not in st.session_state:
    st.session_state.auth_time = None
if "restricted_mode" not in st.session_state:
    st.session_state.restricted_mode = False
if "chat_started" not in st.session_state:
    st.session_state.chat_started = False
if "gpt_role" not in st.session_state:
    st.session_state.gpt_role = "–û–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"

# –í—ã–±–æ—Ä —Ä–æ–ª–∏ GPT –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT")
role_options = {
    "–û–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": "–¢—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π AI, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.",
    "–£—á–∏—Ç–µ–ª—å": "–¢—ã ‚Äì —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —É—á–∏—Ç–µ–ª—å, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.",
    "–®—É—Ç–Ω–∏–∫": "–¢—ã ‚Äì –≤–µ—Å–µ–ª—ã–π –∫–æ–º–∏–∫, –æ—Ç–≤–µ—á–∞—é—â–∏–π —Å —é–º–æ—Ä–æ–º.",
    "–ü—Å–∏—Ö–æ–ª–æ–≥": "–¢—ã ‚Äì —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    "–°—Ç—Ä–æ–≥–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": "–¢—ã ‚Äì —Å—Ç—Ä–æ–≥–∏–π –∫–æ—É—á, –∫–æ—Ç–æ—Ä—ã–π –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é."
}
selected_role = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å ChatGPT", list(role_options.keys()))

# –ï—Å–ª–∏ —Ä–æ–ª—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π
if selected_role != st.session_state.gpt_role:
    st.session_state.gpt_role = selected_role
    st.session_state.messages = [{"role": "system", "content": role_options[selected_role]}]
    log_event("ROLE_CHANGED", f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_role}")

st.sidebar.write(f"üîπ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: **{selected_role}**")

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def authenticate(password):
    if password == AUTH_PASSWORD:
        st.session_state.is_authenticated = True
        st.session_state.auth_time = time.time()
        st.session_state.restricted_mode = False
        st.session_state.message_count = 0
        st.success("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ.")
        log_event("AUTH_SUCCESS", "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —á–∞—Ç")
    else:
        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        log_event("AUTH_FAIL", "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (3 –º–∏–Ω—É—Ç—ã)
if st.session_state.is_authenticated:
    elapsed_time = time.time() - st.session_state.auth_time
    if elapsed_time > 180:
        st.session_state.restricted_mode = True
        st.warning("‚ö†Ô∏è –í—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        log_event("RESTRICTED_MODE", "–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
if st.session_state.message_count >= 20 and not st.session_state.is_authenticated:
    st.warning("üîí –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    password = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        authenticate(password)
        log_event("AUTH_ATTEMPT", "–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–æ–±—â–µ–Ω–∏–π
elif st.session_state.restricted_mode:
    st.warning("‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    predefined_messages = ["–ü—Ä–∏–≤–µ—Ç!", "–ö–∞–∫ –¥–µ–ª–∞?", "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!", "–°–ø–∞—Å–∏–±–æ!", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"]
    selected_message = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", predefined_messages)
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
        st.session_state.messages.append({"role": "user", "content": selected_message})
        log_event("MESSAGE_SENT", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {selected_message}")

        with st.chat_message("user"):
            st.markdown(selected_message)

        response = client.chat.completions.create(
            model="gpt-4",
            messages=st.session_state.messages
        )
        reply = response.choices[0].message.content
        st.session_state.messages.append({"role": "assistant", "content": reply})
        log_event("BOT_REPLY", f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {reply}")

        with st.chat_message("assistant"):
            st.markdown(reply)

# –û–±—ã—á–Ω—ã–π —á–∞—Ç
else:
    prompt = st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    if prompt:
        if not st.session_state.chat_started:
            log_event("CHAT_STARTED", "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞")
            st.session_state.chat_started = True

        st.session_state.message_count += 1
        st.session_state.messages.append({"role": "user", "content": prompt})
        log_event("MESSAGE_SENT", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {prompt}")

        with st.chat_message("user"):
            st.markdown(prompt)

        response = client.chat.completions.create(
            model="gpt-4",
            messages=st.session_state.messages
        )
        reply = response.choices[0].message.content
        st.session_state.messages.append({"role": "assistant", "content": reply})
        log_event("BOT_REPLY", f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {reply}")

        with st.chat_message("assistant"):
            st.markdown(reply)
